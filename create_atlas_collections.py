#!/usr/bin/env python3
"""
Script pour cr√©er les collections et donn√©es initiales dans MongoDB Atlas
Utilise les m√™mes param√®tres de connexion que le serveur FastAPI
"""
import os
import sys
from datetime import datetime, timedelta
from pymongo import MongoClient
from passlib.context import CryptContext
import uuid

# Configuration exacte du serveur FastAPI
MONGO_URL = "mongodb+srv://j88463800_db_user:7TW5vH3p7Xq92BY8@ambeauty.0vk8krw.mongodb.net/?retryWrites=true&w=majority&appName=AMBEAUTY"

# Security
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto", bcrypt__rounds=12)

def hash_password(password):
    return pwd_context.hash(str(password)[:72] if password else "")

def main():
    try:
        print("üîó Connexion √† MongoDB Atlas avec les param√®tres FastAPI...")
        
        # Utiliser exactement les m√™mes param√®tres que dans server.py
        client = MongoClient(
            MONGO_URL, 
            serverSelectionTimeoutMS=10000,
            connectTimeoutMS=10000,
            socketTimeoutMS=10000,
            tls=True,
            tlsAllowInvalidCertificates=True,
            retryWrites=True
        )
        
        # Test de connexion
        client.server_info()
        db = client.am_beauty
        print("‚úÖ Connexion √† MongoDB Atlas r√©ussie!")

        # Lister les collections existantes
        existing_collections = db.list_collection_names()
        print(f"üìä Collections existantes: {existing_collections}")

        # 1. Cr√©er l'utilisateur admin s'il n'existe pas
        print("\nüë§ Cr√©ation de l'utilisateur admin...")
        admin_user = db.users.find_one({"email": "admin@ambeauty.com"})
        if not admin_user:
            admin = {
                "id": str(uuid.uuid4()),
                "username": "admin",
                "email": "admin@ambeauty.com",
                "password": hash_password("admin123456"),
                "role": "admin",
                "instagram": "@ambeauty_official",
                "created_at": datetime.utcnow()
            }
            result = db.users.insert_one(admin)
            print(f"‚úÖ Utilisateur admin cr√©√© avec ID: {result.inserted_id}")
        else:
            print("‚úÖ Utilisateur admin existe d√©j√†")

        # 2. Cr√©er des utilisateurs clients d'exemple
        print("\nüë• Cr√©ation d'utilisateurs clients...")
        clients = [
            {
                "username": "Sophie Martin",
                "email": "sophie@test.com",
                "password": "test123",
                "instagram": "@sophie_beauty"
            },
            {
                "username": "Marie Dubois",
                "email": "marie@test.com", 
                "password": "test123",
                "instagram": "@marie_nails"
            },
            {
                "username": "Julie Moreau",
                "email": "julie@test.com",
                "password": "test123", 
                "instagram": "@julie_lashes"
            }
        ]

        for client_data in clients:
            existing_client = db.users.find_one({"email": client_data["email"]})
            if not existing_client:
                client_user = {
                    "id": str(uuid.uuid4()),
                    "username": client_data["username"],
                    "email": client_data["email"],
                    "password": hash_password(client_data["password"]),
                    "role": "user",
                    "instagram": client_data["instagram"],
                    "created_at": datetime.utcnow()
                }
                result = db.users.insert_one(client_user)
                print(f"‚úÖ Client {client_data['email']} cr√©√© avec ID: {result.inserted_id}")

        # 3. Cr√©er des cr√©neaux horaires pour les prochains jours
        print("\nüìÖ Cr√©ation des cr√©neaux horaires...")
        
        services = [
            "French Manucure",
            "Nail Art", 
            "Pose Gel",
            "Extensions de Cils",
            "Soins des Pieds",
            "Tous services"
        ]
        
        time_slots = [
            "09:00", "10:00", "11:00", "12:00",
            "14:00", "15:00", "16:00", "17:00", "18:00"
        ]
        
        slots_created = 0
        for i in range(14):  # 2 semaines √† partir d'aujourd'hui
            date = (datetime.now() + timedelta(days=i+1)).strftime("%Y-%m-%d")
            
            # √âviter les dimanches (jour 6 dans weekday())
            day_of_week = (datetime.now() + timedelta(days=i+1)).weekday()
            if day_of_week == 6:  # Dimanche
                continue
            
            for time_slot in time_slots:
                for service in services:
                    existing_slot = db.time_slots.find_one({
                        "date": date,
                        "time": time_slot,
                        "service": service
                    })
                    
                    if not existing_slot:
                        slot = {
                            "id": str(uuid.uuid4()),
                            "date": date,
                            "time": time_slot,
                            "service": service,
                            "is_available": True,
                            "is_booked": False,
                            "booking_id": None,
                            "created_at": datetime.utcnow()
                        }
                        result = db.time_slots.insert_one(slot)
                        slots_created += 1
        
        print(f"‚úÖ {slots_created} cr√©neaux horaires cr√©√©s")

        # 4. Cr√©er quelques r√©servations d'exemple
        print("\nüìù Cr√©ation de r√©servations d'exemple...")
        
        # R√©cup√©rer quelques cr√©neaux et utilisateurs pour cr√©er des r√©servations
        some_slots = list(db.time_slots.find({"is_booked": False}).limit(3))
        some_users = list(db.users.find({"role": "user"}).limit(2))
        
        bookings_created = 0
        for i, slot in enumerate(some_slots[:2]):  # Cr√©er 2 r√©servations
            if i < len(some_users):
                user = some_users[i]
                booking = {
                    "id": str(uuid.uuid4()),
                    "user_id": user["id"],
                    "customer_name": user["username"],
                    "customer_email": user["email"],
                    "customer_phone": f"06{20000000 + i:08d}",
                    "service": slot["service"],
                    "date": slot["date"],
                    "time": slot["time"],
                    "notes": f"R√©servation d'exemple pour {slot['service']}",
                    "status": "confirmed",
                    "created_at": datetime.utcnow()
                }
                
                # Ins√©rer la r√©servation
                result = db.bookings.insert_one(booking)
                
                # Marquer le cr√©neau comme r√©serv√©
                db.time_slots.update_one(
                    {"id": slot["id"]},
                    {"$set": {"is_booked": True, "booking_id": booking["id"]}}
                )
                
                bookings_created += 1
                print(f"‚úÖ R√©servation cr√©√©e: {booking['customer_name']} - {booking['service']}")

        # 5. Statistiques finales
        print("\nüìä Statistiques finales de MongoDB Atlas:")
        stats = {
            "users": db.users.count_documents({}),
            "time_slots": db.time_slots.count_documents({}),
            "bookings": db.bookings.count_documents({}),
            "media": db.media.count_documents({})
        }
        
        for collection, count in stats.items():
            print(f"  - {collection}: {count} documents")

        # 6. Lister toutes les collections cr√©√©es
        final_collections = db.list_collection_names()
        print(f"\nüóÇÔ∏è Collections dans MongoDB Atlas: {final_collections}")

        print("\nüéâ Cr√©ation des collections MongoDB Atlas termin√©e!")
        print("\nüìã Comptes disponibles:")
        print("  üë§ Admin: admin@ambeauty.com / admin123456")
        print("  üë§ Clients: sophie@test.com, marie@test.com, julie@test.com / test123")
        
        print(f"\nüìÖ {slots_created} cr√©neaux horaires disponibles")
        print(f"üìù {bookings_created} r√©servations d'exemple cr√©√©es")

    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {e}")
        import traceback
        print(f"D√©tails de l'erreur: {traceback.format_exc()}")
        sys.exit(1)

if __name__ == "__main__":
    main()